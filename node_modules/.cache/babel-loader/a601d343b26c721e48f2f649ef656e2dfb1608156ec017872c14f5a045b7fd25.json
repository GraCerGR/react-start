{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0424\\u0430\\u0439\\u043B\\u044B\\\\\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B\\\\\\u0423\\u043D\\u0438\\u0432\\u0435\\u0440\\u0441\\u0438\\u0442\\u0435\\u0442\\\\HITs\\\\2 \\u043A\\u0443\\u0440\\u0441\\\\2 \\u0441\\u0435\\u043C\\u0435\\u0441\\u0442\\u0440\\\\React\\\\react-start\\\\src\\\\components\\\\Tree.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TreeComponent = () => {\n  _s();\n  const [tree, setTree] = useState([]);\n\n  //-------------------------Создание папок с правильным путём--------------------------------\n\n  const addFolder = parentId => {\n    const parentFolder = tree.find(folder => folder.id === parentId);\n    if (parentFolder) {\n      const lastChildIndex = parentFolder.children ? parentFolder.children.length : 0;\n      const newFolder = {\n        id: `${parentId}.${lastChildIndex + 1}`,\n        name: `${parentId}.${lastChildIndex + 1}`,\n        children: []\n      };\n      parentFolder.children = parentFolder.children ? [...parentFolder.children, newFolder] : [newFolder];\n      setTree([...tree]);\n    } else {\n      const newFolder = {\n        id: parentId === 'root' ? `${parentId}.${tree.length + 1}` : `${parentId}.${tree.length + 1}`,\n        name: parentId === 'root' ? `${parentId}.${tree.length + 1}` : `${parentId}.${tree.length + 1}`,\n        children: []\n      };\n      setTree([...tree, newFolder]);\n    }\n  };\n\n  //---------------------------------------------------------\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => addFolder('root'),\n      children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u043F\\u0430\\u043F\\u043A\\u0443\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), tree.map(folder => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: folder.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addFolder(folder.id),\n        children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u043F\\u043E\\u0434\\u043F\\u0430\\u043F\\u043A\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this), folder.children && folder.children.map(child => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: child.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this)\n      }, child.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this))]\n    }, folder.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(TreeComponent, \"ugp5+nmxsx92BotdmLSIj4zaERo=\");\n_c = TreeComponent;\nexport default TreeComponent;\nvar _c;\n$RefreshReg$(_c, \"TreeComponent\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TreeComponent","_s","tree","setTree","addFolder","parentId","parentFolder","find","folder","id","lastChildIndex","children","length","newFolder","name","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","child","_c","$RefreshReg$"],"sources":["D:/Файлы/Документы/Университет/HITs/2 курс/2 семестр/React/react-start/src/components/Tree.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst TreeComponent = () => {\r\n  const [tree, setTree] = useState([]);\r\n\r\n//-------------------------Создание папок с правильным путём--------------------------------\r\n\r\nconst addFolder = (parentId) => {\r\n    const parentFolder = tree.find(folder => folder.id === parentId);\r\n    \r\n    if (parentFolder) {\r\n      const lastChildIndex = parentFolder.children ? parentFolder.children.length : 0;\r\n      \r\n      const newFolder = {\r\n        id: `${parentId}.${lastChildIndex + 1}`,\r\n        name: `${parentId}.${lastChildIndex + 1}`,\r\n        children: []\r\n      };\r\n      \r\n      parentFolder.children = parentFolder.children ? [...parentFolder.children, newFolder] : [newFolder];\r\n      \r\n      setTree([...tree]);\r\n    } else {\r\n      const newFolder = {\r\n        id: parentId === 'root' ? `${parentId}.${tree.length + 1}` : `${parentId}.${tree.length + 1}`,\r\n        name: parentId === 'root' ? `${parentId}.${tree.length + 1}` : `${parentId}.${tree.length + 1}`,\r\n        children: []\r\n      };\r\n      \r\n      setTree([...tree, newFolder]);\r\n    }\r\n  };\r\n\r\n//---------------------------------------------------------\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => addFolder('root')}>Добавить папку</button>\r\n      {tree.map(folder => (\r\n        <div key={folder.id}>\r\n          <span>{folder.name}</span>\r\n          <button onClick={() => addFolder(folder.id)}>Добавить подпапку</button>\r\n          {folder.children && folder.children.map(child => (\r\n            <div key={child.id}>\r\n              <span>{child.name}</span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TreeComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}