{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u0424\\u0430\\u0439\\u043B\\u044B\\\\\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B\\\\\\u0423\\u043D\\u0438\\u0432\\u0435\\u0440\\u0441\\u0438\\u0442\\u0435\\u0442\\\\HITs\\\\2 \\u043A\\u0443\\u0440\\u0441\\\\2 \\u0441\\u0435\\u043C\\u0435\\u0441\\u0442\\u0440\\\\React\\\\react-start\\\\src\\\\components\\\\Tree.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Tree() {\n  var _s = $RefreshSig$();\n  const TreeView = () => {\n    _s();\n    const [folders, setFolders] = useState([{\n      id: 1,\n      name: 'Folder 1',\n      children: []\n    }, {\n      id: 2,\n      name: 'Folder 2',\n      children: []\n    }]);\n    const addFolder = () => {\n      const newFolder = {\n        id: folders.length + 1,\n        name: `Folder ${folders.length + 1}`,\n        children: []\n      };\n      setFolders([...folders, newFolder]);\n    };\n    const deleteFolder = id => {\n      const updatedFolders = folders.filter(folder => folder.id !== id);\n      setFolders(updatedFolders);\n    };\n    const editFolderName = (id, newName) => {\n      const updatedFolders = folders.map(folder => folder.id === id ? {\n        ...folder,\n        name: newName\n      } : folder);\n      setFolders(updatedFolders);\n    };\n    const resetFolders = () => {\n      setFolders([{\n        id: 1,\n        name: 'Folder 1',\n        children: []\n      }, {\n        id: 2,\n        name: 'Folder 2',\n        children: []\n      }]);\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addFolder,\n        children: \"Add Folder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetFolders,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), folders.map(folder => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: folder.name,\n          onChange: e => editFolderName(folder.id, e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => deleteFolder(folder.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this)]\n      }, folder.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 15\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }, this);\n  };\n  _s(TreeView, \"HJd8xt4hAvs4nZAiQEwkvGC5R0w=\");\n  return TreeView;\n}\n_c = Tree;\nvar _c;\n$RefreshReg$(_c, \"Tree\");","map":{"version":3,"names":["Tree","_s","$RefreshSig$","TreeView","folders","setFolders","useState","id","name","children","addFolder","newFolder","length","deleteFolder","updatedFolders","filter","folder","editFolderName","newName","map","resetFolders","_jsxDEV","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","_c","$RefreshReg$"],"sources":["D:/Файлы/Документы/Университет/HITs/2 курс/2 семестр/React/react-start/src/components/Tree.jsx"],"sourcesContent":["export function Tree(){\r\n    const TreeView = () => {\r\n        const [folders, setFolders] = useState([\r\n          { id: 1, name: 'Folder 1', children: [] },\r\n          { id: 2, name: 'Folder 2', children: [] },\r\n        ]);\r\n      \r\n        const addFolder = () => {\r\n          const newFolder = {\r\n            id: folders.length + 1,\r\n            name: `Folder ${folders.length + 1}`,\r\n            children: [],\r\n          };\r\n          setFolders([...folders, newFolder]);\r\n        };\r\n      \r\n        const deleteFolder = (id) => {\r\n          const updatedFolders = folders.filter((folder) => folder.id !== id);\r\n          setFolders(updatedFolders);\r\n        };\r\n      \r\n        const editFolderName = (id, newName) => {\r\n          const updatedFolders = folders.map((folder) =>\r\n            folder.id === id ? { ...folder, name: newName } : folder\r\n          );\r\n          setFolders(updatedFolders);\r\n        };\r\n      \r\n        const resetFolders = () => {\r\n          setFolders([\r\n            { id: 1, name: 'Folder 1', children: [] },\r\n            { id: 2, name: 'Folder 2', children: [] },\r\n          ]);\r\n        };\r\n      \r\n        return (\r\n          <div>\r\n            <button onClick={addFolder}>Add Folder</button>\r\n            <button onClick={resetFolders}>Reset</button>\r\n            {folders.map((folder) => (\r\n              <div key={folder.id}>\r\n                <input\r\n                  type=\"text\"\r\n                  value={folder.name}\r\n                  onChange={(e) => editFolderName(folder.id, e.target.value)}\r\n                />\r\n                <button onClick={() => deleteFolder(folder.id)}>Delete</button>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        );\r\n      };\r\n      \r\n      return TreeView;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}